import api
import asyncio
from config import TOKEN
import markups
import database

from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery

dp = Dispatcher()

@dp.message(CommandStart())
async def welcome(message: Message) -> None:
     
    user_first = await database.new_user(message.from_user.id)
    
    balance = await database.get_balance(message.from_user.id)
    
    tarif = await database.price_month(message.from_user.id)
     
    welcome_text = f'''
–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}!

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–∞–º—ã–π –ª—É—á—à–∏–π VPN –Ω–∞ —Ä—ã–Ω–∫–µ!

–ü–ª—é—Å—ã:
- –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å–∞–π—Ç–∞–º
- —Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
- –µ–≥–æ –º–æ–∂–Ω–æ –¥–∞–∂–µ –Ω–µ –≤—ã–∫–ª—é—á–∞—Ç—å
'''
    user_text = f'''
–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}!

{html.bold(f'–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ')}
{tarif}

–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∫—É–ø–∏—Ç—å –Ω–æ–≤—ã–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É {html.bold("–ú–æ–∏ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")}
'''

    if user_first:
        await message.answer(welcome_text, reply_markup=markups.welcome_connect)
        print("LOG: main.py > –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        await database.register_user(message.from_user.id)
    else:
        await message.answer(user_text, reply_markup=markups.dashboard)
        print("LOG: main.py > –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    

    
@dp.callback_query()
async def callback(callback_query: CallbackQuery):
    callback_args = callback_query.data
    if callback_args == "dashboard":
        await callback_query.message.edit_text("—Ç—É—Ç –±—É–¥–µ—Ç –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç(–∑–∞—Ä–µ–≥–∞–Ω)")
    elif callback_args == "welcome_connect":
        welcome_connect_text = '''
–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:

üåê –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Ôºç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π VPN:
1. üì∫ –†–∞–±–æ—Ç–∞–µ—Ç YouTube
2. üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–∞–π—Ç—ã –Ω–µ –≤—ã–¥–∞—é—Ç –æ—à–∏–±–æ–∫
3. üîí –û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –Ω–∞–¥–µ–∂–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤, –µ–≥–æ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä—É—é—Ç
4. ‚ö°Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞

üöÄ –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π Ôºç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –ø—Ä–æ—Ç–∏–≤ —Ü–µ–Ω–∑—É—Ä—ã:
1. üéµ –†–∞–±–æ—Ç–∞–µ—Ç –¢–∏–∫–¢–æ–∫
2. üåç –°–µ—Ä–≤–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç—Ä–∞–Ω–µ —Å —Å–∞–º—ã–º –º–∞–ª–µ–Ω—å–∫–∏–º –ø–∏–Ω–≥–æ–º
3. ‚ö°Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∏ –ø–æ—á—Ç–∏ –Ω–µ—Ç
4. üõ°Ô∏è –°–∞–º—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª VPN –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
'''
        await callback_query.message.edit_text(welcome_connect_text,reply_markup=markups.tarif_choice)
    elif callback_args == "welcome_menu":
        welcome_text = f'''
–ü—Ä–∏–≤–µ—Ç, {html.bold(callback_query.from_user.full_name)}!

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–∞–º—ã–π –ª—É—á—à–∏–π VPN –Ω–∞ —Ä—ã–Ω–∫–µ!

–ü–ª—é—Å—ã:
- –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å–∞–π—Ç–∞–º
- —Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
- –µ–≥–æ –º–æ–∂–Ω–æ –¥–∞–∂–µ –Ω–µ –≤—ã–∫–ª—é—á–∞—Ç—å
'''
        await callback_query.message.edit_text(welcome_text, reply_markup=markups.welcome_connect)
    elif callback_args == "st_choice":
        await callback_query.message.edit_text("–í—ã–±—Ä–∞–Ω: –°—Ç–∞–Ω–¥–∞—Ä—Ç", reply_markup=markups.st_choice)
    elif callback_args == "ft_choice":
        await callback_query.message.edit_text("–í—ã–±—Ä–∞–Ω: –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π", reply_markup=markups.ft_choice)
    
    
    elif callback_args.startswith("payment"):
        args = callback_args.split('_')
        sub_period = args[1]
        tarif_type = args[2]
        
        print(f"Payment Type: {sub_period}")
        print(f"Tarif Type: {tarif_type}")
        sublink = await api.addClient(tarif_type, sub_period, callback_query.from_user.id)
        await callback_query.message.edit_text(f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ VPN: \n<code>{sublink}</code>")
        
        
    await callback_query.answer()    
    


    
async def main() -> None:
    bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await database.recreate_db()
    await dp.start_polling(bot)
    
if __name__ == "__main__":
    asyncio.run(main())